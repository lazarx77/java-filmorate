-- PUBLIC.USERS определение

CREATE TABLE IF NOT EXISTS USERS (
	USER_ID BIGINT NOT NULL AUTO_INCREMENT,
	EMAIL VARCHAR_IGNORECASE(40) NOT NULL,
	LOGIN VARCHAR_IGNORECASE(40) NOT NULL,
	USER_NAME VARCHAR_IGNORECASE(40),
	BIRTHDAY DATE,
	CONSTRAINT USERS_PK PRIMARY KEY (USER_ID),
	CONSTRAINT USERS_UNIQUE UNIQUE (EMAIL)
);

-- PUBLIC.FRIENDSHIP определение

CREATE TABLE IF NOT EXISTS FRIENDSHIP (
	USER_ID BIGINT,
	STATUS BOOLEAN NOT NULL,
	FRIEND_ID BIGINT,
	CONSTRAINT FRIENDSHIP_USERS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID),
	CONSTRAINT FRIENDSHIP_USERS_FK_1 FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS(USER_ID)
);

-- PUBLIC.RATING определение

CREATE TABLE IF NOT EXISTS RATING (
	RATING_ID INTEGER NOT NULL,
	RATING_NAME VARCHAR_IGNORECASE(200) NOT NULL,
	CONSTRAINT RATING_PK PRIMARY KEY (RATING_ID)
);

-- PUBLIC.GENRES определение

CREATE TABLE IF NOT EXISTS GENRES (
	GENRE_ID INTEGER NOT NULL,
	GENRE_NAME VARCHAR_IGNORECASE(40) NOT NULL,
	CONSTRAINT GENRES_PK PRIMARY KEY (GENRE_ID)
);

-- PUBLIC.FILMS определение

CREATE TABLE IF NOT EXISTS FILMS (
	FILM_ID BIGINT NOT NULL AUTO_INCREMENT,
	FILM_NAME VARCHAR_IGNORECASE(40) NOT NULL,
	DESCRIPTION VARCHAR_IGNORECASE(200),
	RELEASE_DATE DATE,
	DURATION BIGINT,
	RATING_ID INTEGER,
	CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
	CONSTRAINT FILMS_RATING_FK FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.RATING(RATING_ID)
);

-- PUBLIC.FILMS_GENRES определение

CREATE TABLE IF NOT EXISTS FILMS_GENRES (
	FILM_ID BIGINT,
	GENRE_ID INTEGER,
	CONSTRAINT FILMS_GENRES_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID),
	CONSTRAINT FILMS_GENRES_GENRES_FK FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRES(GENRE_ID)
);

-- PUBLIC.LIKES определение

CREATE TABLE IF NOT EXISTS LIKES (
	FILM_ID BIGINT,
	USER_ID BIGINT,
	CONSTRAINT LIKES_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID),
	CONSTRAINT LIKES_USERS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID)
);
